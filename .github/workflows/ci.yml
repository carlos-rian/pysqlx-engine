name: ci

on:
  push:
    branches:
      - main
      - release/*
      

  pull_request:
    branches:
      - "main"
      - "release/*"
      - dependabot/*
      - deps/*
      - bugfix/*

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 6
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11", "3.12"]
      fail-fast: false

    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: setup python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: enable cache
        uses: actions/cache@v3
        id: cache
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ runner.os }}-python-${{ env.pythonLocation }}-${{ hashFiles('pyproject.toml') }}-test-v02

      - name: up database
        run: cp tests/docker/docker-compose.yml docker-compose.yml &&
          docker-compose up --build --detach

      - name: wait container up
        run: |
          docker ps -a && \
          sleep 20

      - name: install poetry - python 3.7
        if: matrix.python-version == '3.7'
        uses: snok/install-poetry@v1
        with:
          version: '1.5.0'
          virtualenvs-create: true
          virtualenvs-in-project: true
        
      - name: install poetry - python 3.8+
        if: matrix.python-version != '3.7'
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: install python dependencies
        run: |
          poetry install --no-interaction
        if: steps.cache-deps.outputs.cache-hit != 'true'

      - name: run unittest
        run: |
          pip install pydantic==1.10.2
          pip freeze | grep pydantic
          poetry run pytest --ignore=tests/benchmark --cov=pysqlx_engine --cov=tests --cov-report=term-missing:skip-covered --cov-report=xml tests ${@}

      - name: upload coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: ${{ matrix.os }}_${{ matrix.python-version }}_pydantic_v1
      
      - name: run unittest v2
        run: |
          pip install pydantic --upgrade
          pip freeze | grep pydantic
          poetry run pytest --ignore=tests/benchmark --cov=pysqlx_engine --cov=tests --cov-report=term-missing:skip-covered --cov-report=xml tests ${@}

      - name: upload coverage v2
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: ${{ matrix.os }}_${{ matrix.python-version }}_pydantic_v2

  build:
    if: contains(github.ref, 'main') || contains(github.ref, 'release')
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: release - check package version
        if: github.ref != 'refs/heads/main'
        run: |
          pip install --upgrade httpx toml
          python .github/release.py

      - name: prod - check package version
        if: github.ref == 'refs/heads/main'
        run: |
          pip install --upgrade httpx toml
          python .github/prod.py

      - name: build and publish to pypi
        uses: JRubics/poetry-publish@v1.13
        with:
          pypi_token: ${{ secrets.PYPI_TOKEN }}

      - name: create celease
        if: github.ref == 'refs/heads/main'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.PY_SQLX_VERSION }}
          release_name: ${{ env.PY_SQLX_VERSION }}
          body: |
            Changes in this Release  
            ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false
