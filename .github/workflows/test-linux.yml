name: Linux Run and Publish Test

on:
  push:
    branches:
      - 'main'
      - 'dependabot*'
    paths:
      - '/sqlx_engine/*'
      - '/tests/*'
      - 'requirements*'
      - 'pyproject.toml'
      - '.github/workflows/test-linux.yml'

jobs:
  test:
    name: Run Unit Test
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 4
      matrix:
        os: [ubuntu-latest]
        #, windows-2019, windows-2022]
        python-version: ["3.8", ] 
        #"3.9", "3.10"]
        include:
          - os: ubuntu-latest
            base: alpine-3.14
            file: Dockerfile.linux
            tag: phillipsj/pstools:${{ github.event.release.tag_name }}-linux-amd64
          - os: windows-2019
            base: nanoserver-1809
            file: Dockerfile.windows
            tag: phillipsj/pstools:${{ github.event.release.tag_name }}-windows-ltsc2019-amd64
          - os: windows-2022
            base: nanoserver-ltsc2022
            file: Dockerfile.windows
            tag: phillipsj/pstools:${{ github.event.release.tag_name }}-windows-ltsc2022-amd64
      fail-fast: true

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - uses: actions/cache@v2
        id: cache
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ runner.os }}-python-${{ env.pythonLocation }}-${{ hashFiles('pyproject.toml') }}-test-v02

      - name: Docker Manifest
        run: |
          docker manifest create phillipsj/pstools:${{ github.event.release.tag_name }} \
            --amend phillipsj/pstools:${{ github.event.release.tag_name }}-linux-amd64 \
            --amend phillipsj/pstools:${{ github.event.release.tag_name }}-windows-ltsc2019-amd64 \
            --amend phillipsj/pstools:${{ github.event.release.tag_name }}-windows-ltsc2022-amd64
        
      - name: Docker Compose Up
        run:  docker-compose up --build --detach
      
      - name: Check Containers
        run: docker ps -a && sleep 20

      - name: Install Poetry
        run: pip install poetry --user
      
      - name: Export Poetry Requirements
        run: poetry export --dev -f requirements.txt --output requirements-dev.txt  --without-hashes
      
      - name: Install Dependencies
        run: pip install -r requirements-dev.txt
        
      - name: Test
        run: pytest --cov=sqlx_engine --ignore=tests --cov-report=term-missing:skip-covered --cov-report=xml tests ${@}
        
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }} 
