[tool.poetry]
name = "pysqlx-engine"

version = "0.2.25"
description = "Async and Sync SQL Engine for Python, with support for MySQL, PostgreSQL, SQLite and Microsoft SQL Server."
authors = ["Carlos Rian <crian.rian@gmail.com>"]
license = "MIT"
readme = "readme.md"
repository = "https://github.com/carlos-rian/pysqlx-engine"
homepage = "https://carlos-rian.github.io/pysqlx-engine"
documentation = "https://carlos-rian.github.io/pysqlx-engine"
keywords = ["async", "database", "sql", "engine", "fastapi"]

packages = [{ include = "pysqlx_engine" }]

classifiers = [
    "Framework :: AnyIO",
    "Framework :: AsyncIO",
    "Framework :: FastAPI",
    "Framework :: IPython",
    "Framework :: Jupyter",
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Operating System :: MacOS",
    "Operating System :: Microsoft",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python",
    "Topic :: Database",
    "Topic :: Internet",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development",
    "Typing :: Typed",
]

[tool.poetry.dependencies]
python = "^3.8"
pydantic = [{ version = ">=1 <3", python = ">=3.8" }]
Pygments = "^2.15.1"
pysqlx-core = "^0.2.0"


[tool.poetry.group.dev.dependencies]
isort = [
    { version = "^5.11", python = "<3.8" },
    { version = "^5.12", python = ">=3.8" },
]
pytest = ">=8.3.2"
pytest-asyncio = ">=0.24.0"
pytest-cov = ">=5.0.0"
pytest-dotenv = "^0"
pytest-xdist = "^3.6.1"
toml = "^0.10.2"
ruff = "^0.6.2"
taskipy = "^1.13.0"
trio = "^0.26.2"
rich = "^13.8.0"

[tool.ruff]
line-length = 120

[tool.ruff.format]
quote-style = "double"
indent-style = "tab"
docstring-code-format = true
docstring-code-line-length = 120

[tool.ruff.lint]
ignore = ["E402", "F403", "F405"]

[tool.ruff.lint.isort]
case-sensitive = true

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
testpaths = 'tests'
log_format = '%(name)s %(levelname)s: %(message)s'
filterwarnings = 'error'
xfail_strict = true
env_files = "tests/.env.test"
asyncio_mode = "strict"
asyncio_default_fixture_loop_scope="session"
log_cli = true
log_cli_level = "DEBUG"
addopts = "--maxfail=10 --ignore=tests/unittest/streess_test_pool"

[tool.taskipy.tasks]
lint = "ruff check . && ruff check . --diff"
format = "ruff check . --fix && ruff format ."
stop_db = "rm -rf dev.db & docker-compose --file tests/docker/docker-compose.yml down"
start_db = "docker-compose --file tests/docker/docker-compose.yml up --build --detach"
clear_db = "task stop_db && task start_db"
test = "pytest tests -vv -x -s --cov=."
test_with_cache = "pytest tests -vv -x -s --cov=. --cache-clear"
test_clean = "task clear_db && sleep 10 && task test"
cov = "coverage html"

local_core = "poetry remove pysqlx-core && poetry add $w/Documents/repo/my-repos/pysqlx-core/target/wheels/pysqlx_core-0.1.49-cp38-cp38-manylinux_2_34_x86_64.whl"